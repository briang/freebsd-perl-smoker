.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CONFIGSMOKE 1"
.TH CONFIGSMOKE 1 "2010-08-27" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
configsmoke.pl \- Create a configuration for smokeperl.pl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $ perl configsmoke.pl \-p <prefix>[ \-d <defaultsprefix>]
.Ve
.PP
or regenerate from previous _config:
.PP
.Vb 1
\&    $ perl configsmoke.pl \-p <prefix> \-des
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
Current options:
.PP
.Vb 5
\&  \-d dfvalsprefix   Set prefix for a _dfconfig file (<prefix>)
\&  \-c configprefix   When ommited \*(Aqperlcurrent\*(Aq is used
\&  \-j jclprefix      When ommited \*(Aqperlcurrent\*(Aq is used
\&  \-l logprefix      When ommited \*(Aqperlcurrent\*(Aq is used
\&  \-p prefix         Set \-c and \-j and \-l at once
\&
\&  \-des              confirm all answers (needs previous _config)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBTest::Smoke\fR is the symbolic name for a set of scripts and modules
that try to run the perl core tests on as many configurations as possible
and combine the results into an easy to read report.
.PP
The main script is \fIsmokeperl.pl\fR, and this uses a configuration file
that is created by this program (\fIconfigsmoke.pl\fR).  There is no default
configuration as some actions can be rather destructive, so you will need
to create your own configuration by running this program!
.PP
By default the configuration file created is called \fIsmokecurrent_config\fR,
this can be changed by specifying the \f(CW\*(C`\-c <prefix>\*(C'\fR or \f(CW\*(C`\-p <prefix>\*(C'\fR
switch at the command line (\f(CW\*(C`\-c\*(C'\fR will override \f(CW\*(C`\-p\*(C'\fR when both are specified).
.PP
.Vb 1
\&    $ perl configsmoke.pl \-c mysmoke
.Ve
.PP
will create \fImysmoke_config\fR as the configuration file.
.PP
After you are done configuring, a small job command list is written.
For MSWin32 this is called \fIsmokecurrent.cmd\fR otherwise this is called
\&\fIsmokecurrent.sh\fR. Again the default prefix can be overridden by specifying
the \f(CW\*(C`\-j <prefix>\*(C'\fR or \f(CW\*(C`\-p <prefix>\*(C'\fR switch.
.PP
All output (stdout, stderr) from \fIsmokeperl.pl\fR and its sub-processes
is redirected to a logfile called \fIsmokecurrent.log\fR by the small jcl.
(Use \f(CW\*(C`\-l <prefix>\*(C'\fR or \f(CW\*(C`\-p <prefix>\*(C'\fR to override).
.PP
There are two additional configuration default files
\&\fIsmoke562_dfconfig\fR and \fIsmoke58x_dfconfig\fR to help you configure
\&\fBTest::Smoke\fR for these two maintenance branches of the source-tree.
.PP
To create a configuration for the perl 5.8.x branch:
.PP
.Vb 1
\&    $ perl configsmoke.pl \-p smoke58x
.Ve
.PP
This will read additional defaults from \fIsmoke58x_dfconfig\fR and create
\&\fIsmoke58x_config\fR and \fIsmoke58x.sh\fR/\fIsmoke58x.cmd\fR and logfile will be
\&\fIsmoke58x.log\fR.
.PP
To create another configuration for the same branch (and have the
right defaults) you can add the \f(CW\*(C`\-d\*(C'\fR option:
.PP
.Vb 1
\&    $ perl configsmokepl \-p snap58x \-d smoke58x
.Ve
.PP
To create a configuration for the perl 5.6.2 brach:
.PP
.Vb 1
\&    $ perl configsmoke.pl \-p smoke562
.Ve
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Use of the program:
.IP "\(bu" 4
Values in angled-brackets (<>) are alternatives (none other allowed)
.IP "\(bu" 4
Values in square-brackets ([]) are default values (<Enter> confirms)
.IP "\(bu" 4
Use single space to clear a value
.PP
Here is a description of the configuration sections.
.IP "perl_version" 4
.IX Item "perl_version"
\&\f(CW\*(C`perl_version\*(C'\fR sets a number of default_values.  This makes the
\&\fIsmoke5?x_dfconfig\fR files almost obsolete, although they still
provide a nice way to set the prefix and set the perl_version.
.IP "ddir" 4
.IX Item "ddir"
\&\f(CW\*(C`ddir\*(C'\fR is the destination directory. This is used to put the
source-tree in and build perl. If a source-tree appears to be there
you will need to confirm your choice.
.IP "cfg" 4
.IX Item "cfg"
\&\f(CW\*(C`cfg\*(C'\fR is the path to the file that holds the build-configurations.
There are several build-cfg files provided with the distribution:
.RS 4
.IP "\fIperlcurrent.cfg\fR for 5.11.x+ on unixy systems" 4
.IX Item "perlcurrent.cfg for 5.11.x+ on unixy systems"
.PD 0
.IP "\fIperl510x.cfg\fR for 5.10.x (\s-1MAINT\s0) on unixy systems" 4
.IX Item "perl510x.cfg for 5.10.x (MAINT) on unixy systems"
.IP "\fIperl58x.cfg\fR for 5.8.x (\s-1MAINT\s0) on unixy systems" 4
.IX Item "perl58x.cfg for 5.8.x (MAINT) on unixy systems"
.IP "\fIw32current.cfg\fR for 5.8.x+ on MSWin32" 4
.IX Item "w32current.cfg for 5.8.x+ on MSWin32"
.IP "\fIvmsperl.cfg\fR for 5.8.x+ on OpenVMS" 4
.IX Item "vmsperl.cfg for 5.8.x+ on OpenVMS"
.RE
.RS 4
.RE
.IP "Nick Clark hardlink forest" 4
.IX Item "Nick Clark hardlink forest"
.PD
Here is how Nick described it to me:
.Sp
My plan is to use a few more directories, and avoid make distclean:
.RS 4
.IP "1." 4
rsync as before, but to a master directory. this directory is only used 
for rsyncing from the server
.IP "2." 4
copy that directory (as a hardlink forest) \- gnu cp can do it as cp \-lr,
and I have a perl script to replicate that (which works nicely on FreeBSD)
as a clean master source directory for this smoke session
.IP "3." 4
run the regen headers script (which 5.9.0 now has as a distinct script)
rather than just a Makefile target
.Sp
I now have a clean, up-to-date source tree with accurate headers. For each
smoking configuration
.IP "4." 4
copy that directory (hard links again)
.IP "5." 4
in the copy directory. Configure, build and test
.IP "6." 4
delete the copy directory
.RE
.RS 4
.Sp
deleting a directory seems to be faster than make distclean.
.RE
.IP "sync_type (fsync)" 4
.IX Item "sync_type (fsync)"
\&\f(CW\*(C`sync_type\*(C'\fR (or \f(CW\*(C`fsync\*(C'\fR if you want_forest) can be one of four:
.RS 4
.IP "rsync" 4
.IX Item "rsync"
This will use the \fBrsync\fR program to sync up with the repository.
\&\fIconfigsmoke.pl\fR checks to see if it can find \fBrsync\fR in your path.
.Sp
The default switches passed to \fBrsync\fR are: \fB\-az\ \-\-delete\fR
.IP "snapshot" 4
.IX Item "snapshot"
This will use \fBNet::FTP\fR to try to find the latest snapshot on
<ftp://ftp.funet.fi/languages/perl/snap/>.
.Sp
You can also get the perl\-5.8.x snapshots (and others) via \s-1HTTP\s0
if you have \fB\s-1LWP\s0\fR installed. There are two things you should remember:
.RS 4
.IP "1. start the server-name \fBhttp://\fR" 8
.IX Item "1. start the server-name http://"
.PD 0
.IP "2. the snapshot-file must be specified." 8
.IX Item "2. the snapshot-file must be specified."
.RE
.RS 4
.PD
.Sp
Snapshots are not in sync with the repository, so if you have a working
\&\fBpatch\fR program, you can choose to \*(L"upgrade\*(R" your snapshot by fetching 
all the seperate patches from the repository and applying them.
.RE
.IP "copy" 4
.IX Item "copy"
This will use \fBFile::Copy\fR and \fBFile::Find\fR to just copy from a
local source directory.
.IP "hardlink" 4
.IX Item "hardlink"
This will use \fBFile::Find\fR and the \fBlink\fR function to copy from a 
local source directory. (This is also used if you choose \*(L"forest\*(R".)
.RE
.RS 4
.Sp
See also Test::Smoke::Syncer
.RE
.IP "pfile" 4
.IX Item "pfile"
\&\f(CW\*(C`pfile\*(C'\fR is the path to a textfile that holds the names of patches to
be applied before smoking. This can be used to run a smoke test on proposed
patches that have not been applied (yet) or to see the effect of
reversing an already applied patch. The file format is simple:
.RS 4
.IP "\(bu" 8
one patchfile per line
.IP "\(bu" 8
optionally followed by ';' and options to pass to patch
.IP "\(bu" 8
optionally followed by ';' and a description for the patch
.RE
.RS 4
.Sp
If the file does not exist yet, a skeleton version will be created
for you.
.Sp
You will need a working \fBpatch\fR program to use this feature.
.Sp
\&\fB\s-1TODO\s0\fR:
There is an issue when using the \*(L"forest\*(R" sync, but I will look into that.
.RE
.IP "skip_tests" 4
.IX Item "skip_tests"
This is a MANIFEST-like file with the paths to tests that should be
skipped for this smoke.
.Sp
The process involves on the fly modification of \fI\s-1MANIFEST\s0\fR for tests
in \fIlib/\fR and \fIext/\fR and renaming of core-tests in \fIt/\fR.
.IP "force_c_locale" 4
.IX Item "force_c_locale"
\&\f(CW\*(C`force_c_locale\*(C'\fR is passed as a switch to \fImktest.pl\fR to indicate that
\&\f(CW$ENV{LC_ALL}\fR should be forced to \*(L"C\*(R" during \fBmake test\fR.
.IP "defaultenv" 4
.IX Item "defaultenv"
\&\f(CW\*(C`defaultenv\*(C'\fR, when set will make Test::Smoke remove \f(CW$ENV\fR{\s-1PERLIO\s0} and
only do a single pass \f(CW\*(C`make\ test\*(C'\fR.
.IP "locale" 4
.IX Item "locale"
\&\f(CW\*(C`locale\*(C'\fR and its value are passed to \fImktest.pl\fR and its value is passed
to \fImkovz.pl\fR. \fImktest.pl\fR will do an extra pass of \fBmake test\fR with 
\&\f(CW$ENV{LC_ALL}\fR set to that locale (and \f(CW\*(C`$ENV{PERL_UNICODE} = "";\*(C'\fR,
\&\f(CW\*(C`$ENV{PERLIO} = "perlio";\*(C'\fR). This feature should only be used with
\&\s-1UTF8\s0 locales, that is why this is checked (by regex only).
.Sp
\&\fBIf you know of a way to get the utf8 locales on your system, which is
not coverd here, please let me know!\fR
.IP "mail" 4
.IX Item "mail"
\&\f(CW\*(C`{mail}\*(C'\fR will set the new default for smokeperl.pl
.IP "mail_type" 4
.IX Item "mail_type"
See Test::Smoke::Mailer and mailrpt.pl
.IP "w32args" 4
.IX Item "w32args"
For MSWin32 we need some extra information that is passed to
Test::Smoke::Smoker in order to compensate for the lack of
\&\fBConfigure\fR.
.Sp
See \*(L"Configure_win32( )\*(R" in Test::Smoke::Util and W32Configure.pl
.IP "vmsmake" 4
.IX Item "vmsmake"
Get the make program to use for \s-1VMS\s0 (\s-1MMS\s0 or \s-1MMK\s0). Start with the one
this perl was build with.
.IP "make finetuning" 4
.IX Item "make finetuning"
Two different config options to accomodate the same thing: 
\&\fIparallel build\fR and \fIserial testing\fR
.Sp
.Vb 2
\&  * makeopt  => used by Test::Smoke::Smoker::_make()
\&  * testmake => use a different binary for "make _test"
.Ve
.IP "harnessonly" 4
.IX Item "harnessonly"
\&\f(CW\*(C`harnessonly\*(C'\fR indicates that \f(CW\*(C`make test\*(C'\fR is replaced by \f(CW\*(C`make
test_harness\*(C'\fR.
.IP "hasharness3" 4
.IX Item "hasharness3"
\&\f(CW\*(C`hasharness3\*(C'\fR is automagically set for perl version >= 5.11
.IP "harness3opts" 4
.IX Item "harness3opts"
\&\f(CW\*(C`harness3opts\*(C'\fR are passed to \f(CW\*(C`HARNESS_OPTIONS\*(C'\fR for the \f(CW\*(C`make
test_harness\*(C'\fR step.
.IP "umask" 4
.IX Item "umask"
\&\f(CW\*(C`umask\*(C'\fR will be set in the shell-script that starts the smoke.
.IP "renice" 4
.IX Item "renice"
\&\f(CW\*(C`renice\*(C'\fR will add a line in the shell-script that starts the smoke.
.IP "v" 4
.IX Item "v"
The verbosity level:
.RS 4
.IP "0: Be as quiet as possible" 8
.IX Item "0: Be as quiet as possible"
.PD 0
.IP "1: Give moderate information" 8
.IX Item "1: Give moderate information"
.IP "2: Be as loud as possible" 8
.IX Item "2: Be as loud as possible"
.RE
.RS 4
.PD
.Sp
Every module has its own verbosity control and these are not verry
consistent at the moment.
.RE
.IP "smartsmoke" 4
.IX Item "smartsmoke"
\&\f(CW\*(C`smartsmoke\*(C'\fR indicates that the smoke need not happen if the patchlevel
is the same after syncing the source-tree.
.IP "killtime" 4
.IX Item "killtime"
When \f(CW$Config{d_alarm}\fR is found we can use \f(CW\*(C`alarm()\*(C'\fR to abort 
long running smokes. Leave this value empty to keep the old behaviour.
.Sp
.Vb 2
\&    07:30 => F<smokeperl.pl> is aborted on 7:30 localtime
\&   +23:45 => F<smokeperl.pl> is aborted after 23 hours and 45 minutes
.Ve
.Sp
Thank you Jarkko for donating this suggestion.
.IP "adir" 4
.IX Item "adir"
The smokereports are lost after a new \s-1SYNCTREE\s0 step, it might be handy
to archive them along with the logfile.
.Sp
If you want this then set the directory where you want the stored
(empty value means no archiving).
.IP "delay_report" 4
.IX Item "delay_report"
Some filesystems do not support opening an already opened file. This
makes it hard to scan the logfile for compiler messages. We can delay
the creation of the report and call \fImailrpt.pl\fR after
\&\fIsmokeperl.pl\fR. \s-1VMS\s0 might benefit.
.IP "\s-1PERL5LIB\s0" 4
.IX Item "PERL5LIB"
If you have a value for \s-1PERL5LIB\s0 set in the config environment, you
could have it transferred tho the jcl-wrapperscript. Do not bother
asking if it is not there.
.IP "\s-1PERL5OPT\s0" 4
.IX Item "PERL5OPT"
If you have a value for \s-1PERL5OPT\s0 set in the config environment, you
could have it transferred tho the jcl-wrapperscript. Do not bother
asking if it is not there.
.IP "schedule stuff" 4
.IX Item "schedule stuff"
.RS 4
.PD 0
.IP "cron/crontab" 4
.IX Item "cron/crontab"
.PD
We try to detect 'crontab' or 'cron', read the contents of 
\&\fBcrontab \-l\fR, detect ourself and comment us out.
Then we add an new entry.
.IP "MSWin32 at.exe" 4
.IX Item "MSWin32 at.exe"
We only add a new entry, you will need to remove existing entries,
as \fIat.exe\fR has not got a way comment-out entries.
.RE
.RS 4
.RE
.SH "Supporting subs"
.IX Header "Supporting subs"
.IP "\fIsave_config()\fR" 4
.IX Item "save_config()"
\&\f(CW\*(C`save_config()\*(C'\fR writes the configuration data to disk.
If \f(CW\*(C`Data::Dumper\->can(\*(AqSortkeys\*(Aq)\*(C'\fR it will order the keys.
.IP "\fIsort_configkeys()\fR" 4
.IX Item "sort_configkeys()"
\&\f(CW\*(C`sort_configkeys()\*(C'\fR is the hook for \fBData::Dumper\fR
.Sp
Order and grouping by Merijn, thanks!
.IP "\fIwrite_sh()\fR" 4
.IX Item "write_sh()"
\&\f(CW\*(C`write_sh()\*(C'\fR creates the shell-script.
.IP "\fIwrite_bat()\fR" 4
.IX Item "write_bat()"
\&\f(CW\*(C`write_bat()\*(C'\fR writes the batch-file. It uses the \f(CW\*(C`.cmd\*(C'\fR extension
because it uses commands that are not supported by \fB\s-1COMMAND\s0.COM\fR
.IP "write_com" 4
.IX Item "write_com"
Write a simple \s-1DCL\s0 script that helps running the smoke suite.
.ie n .IP "default_buildcfg( $file_name, $pversion )" 4
.el .IP "default_buildcfg( \f(CW$file_name\fR, \f(CW$pversion\fR )" 4
.IX Item "default_buildcfg( $file_name, $pversion )"
Check to see if \f(CW$file_name\fR exists. If not, copy the default config
for \f(CW$pversion\fR to \f(CW$file_name\fR.
.IP "check_buildcfg" 4
.IX Item "check_buildcfg"
We will try to check the build configurations file to see if we should
comment some options out.
.IP "finish_cfgcheck" 4
.IX Item "finish_cfgcheck"
\&\f(CW\*(C`finish_cfgcheck()\*(C'\fR will create a backup of the original file and
write the new one in its place.
.ie n .IP "_perl_numeric_version( $dotted )" 4
.el .IP "_perl_numeric_version( \f(CW$dotted\fR )" 4
.IX Item "_perl_numeric_version( $dotted )"
Normalize the dotted version to a numeric version.
.SH "TODO"
.IX Header "TODO"
Schedule, logfile optional
.SH "REVISION"
.IX Header "REVISION"
In case I forget to update the \f(CW$VERSION\fR:
.PP
.Vb 1
\&    $Id: configsmoke.pl 1241 2009\-08\-10 09:02:46Z abeltje $
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) 2002\-2003, All rights reserved.
.PP
.Vb 1
\&  * Abe Timmerman <abeltje@cpan.org>
.Ve
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.IP "\(bu" 4
<http://www.perl.com/perl/misc/Artistic.html>
.IP "\(bu" 4
<http://www.gnu.org/copyleft/gpl.html>
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
