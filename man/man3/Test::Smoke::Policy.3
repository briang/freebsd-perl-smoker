.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Smoke::Policy 3"
.TH Test::Smoke::Policy 3 "2010-08-27" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Smoke::Policy \- OO interface to handle the Policy.sh stuff.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Smoke::Policy;
\&
\&    my $srcpath = File::Spec\->updir;
\&    my $policy = Test::Smoke::Policy\->new( $srcpath );
\&
\&    $policy\->substitute( [] );
\&    $policy\->write;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I wish I understood what Merijn is doeing in the original code.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "Test::Smoke::Policy\->new( $srcpath )" 4
.el .IP "Test::Smoke::Policy\->new( \f(CW$srcpath\fR )" 4
.IX Item "Test::Smoke::Policy->new( $srcpath )"
Create a new instance of the Policy object.
Read the file or take data from the \s-1DATA\s0 section.
.ie n .IP "$object\->set_rules( $rules )" 4
.el .IP "\f(CW$object\fR\->set_rules( \f(CW$rules\fR )" 4
.IX Item "$object->set_rules( $rules )"
Set the rules for substitutions.
.ie n .IP "$object\->reset_rules( )" 4
.el .IP "\f(CW$object\fR\->reset_rules( )" 4
.IX Item "$object->reset_rules( )"
Reset the \f(CW\*(C`_rules\*(C'\fR property.
.ie n .IP "$Policy\->_do_subst( )" 4
.el .IP "\f(CW$Policy\fR\->_do_subst( )" 4
.IX Item "$Policy->_do_subst( )"
\&\f(CW\*(C`_do_subst()\*(C'\fR does the substitutions and stores the substituted version
as the \fB_new_policy\fR attribute.
.ie n .IP "$object\->write( )" 4
.el .IP "\f(CW$object\fR\->write( )" 4
.IX Item "$object->write( )"
.PD 0
.ie n .IP "$self\->_read_Policy( $srcpath[, $verbose[, @ccflags]] )" 4
.el .IP "\f(CW$self\fR\->_read_Policy( \f(CW$srcpath\fR[, \f(CW$verbose\fR[, \f(CW@ccflags\fR]] )" 4
.IX Item "$self->_read_Policy( $srcpath[, $verbose[, @ccflags]] )"
.PD
\&\f(CW\*(C`_read_Policy()\*(C'\fR checks the \f(CW$srcpath\fR for these conditions:
.RS 4
.ie n .IP "\fBReference to a \s-1SCALAR\s0\fR Policy is in $$srcpath" 4
.el .IP "\fBReference to a \s-1SCALAR\s0\fR Policy is in \f(CW$$srcpath\fR" 4
.IX Item "Reference to a SCALAR Policy is in $$srcpath"
.PD 0
.ie n .IP "\fBReference to an \s-1ARRAY\s0\fR Policy is in @$srcpath" 4
.el .IP "\fBReference to an \s-1ARRAY\s0\fR Policy is in \f(CW@$srcpath\fR" 4
.IX Item "Reference to an ARRAY Policy is in @$srcpath"
.IP "\fBReference to a \s-1GLOB\s0\fR Policy is read from the filehandle" 4
.IX Item "Reference to a GLOB Policy is read from the filehandle"
.IP "\fBOther values\fR are taken as the base path for \fIPolicy.sh\fR" 4
.IX Item "Other values are taken as the base path for Policy.sh"
.RE
.RS 4
.PD
.Sp
The \f(CW@ccflags\fR are passed to \f(CW\*(C`$self\->default_Policy()\*(C'\fR
.RE
.ie n .IP "$policy\->default_Policy( [@ccflags] )" 4
.el .IP "\f(CW$policy\fR\->default_Policy( [@ccflags] )" 4
.IX Item "$policy->default_Policy( [@ccflags] )"
Generate the default \fIPolicy.sh\fR from a set of ccflags, but be
backward compatible.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) 2001\-2003, All rights reserved.
.PP
.Vb 3
\&  * H.Merijn Brand <hmbrand@hccnet.nl>
\&  * Nicholas Clark <nick@unfortu.net>
\&  * Abe Timmerman <abeltje@cpan.org>
.Ve
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.PP
.Vb 2
\&  * <http://www.perl.com/perl/misc/Artistic.html>,
\&  * <http://www.gnu.org/copyleft/gpl.html>
.Ve
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
