.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Smoke::Reporter 3"
.TH Test::Smoke::Reporter 3 "2010-11-01" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Smoke::Reporter \- OO interface for handling the testresults (mktest.out)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Test::Smoke;
\&    use Test::Smoke::Reporter;
\&
\&    my $reporter = Test::Smoke::Reporter\->new( %args );
\&    $reporter\->write_to_file;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handle the parsing of the \fImktest.out\fR file.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "Test::Smoke::Reporter\->new( %args )" 4
.el .IP "Test::Smoke::Reporter\->new( \f(CW%args\fR )" 4
.IX Item "Test::Smoke::Reporter->new( %args )"
[ Constructor | Public ]
.Sp
Initialise a new object.
.ie n .IP "Test::Smoke::Reporter\->config( $key[, $value] )" 4
.el .IP "Test::Smoke::Reporter\->config( \f(CW$key\fR[, \f(CW$value\fR] )" 4
.IX Item "Test::Smoke::Reporter->config( $key[, $value] )"
[ Accessor | Public ]
.Sp
\&\f(CW\*(C`config()\*(C'\fR is an interface to the package lexical \f(CW%CONFIG\fR, 
which holds all the default values for the \f(CW\*(C`new()\*(C'\fR arguments.
.Sp
With the special key \fBall_defaults\fR this returns a reference
to a hash holding all the default values.
.ie n .IP "$self\->read_parse( [$result_file] )" 4
.el .IP "\f(CW$self\fR\->read_parse( [$result_file] )" 4
.IX Item "$self->read_parse( [$result_file] )"
\&\f(CW\*(C`read_parse()\*(C'\fR reads the smokeresults file and parses it.
.ie n .IP "$self\->_read( $nameorref )" 4
.el .IP "\f(CW$self\fR\->_read( \f(CW$nameorref\fR )" 4
.IX Item "$self->_read( $nameorref )"
\&\f(CW\*(C`_read()\*(C'\fR is a private method that handles the reading.
.RS 4
.ie n .IP "\fBReference to a \s-1SCALAR\s0\fR smokeresults are in $$nameorref" 8
.el .IP "\fBReference to a \s-1SCALAR\s0\fR smokeresults are in \f(CW$$nameorref\fR" 8
.IX Item "Reference to a SCALAR smokeresults are in $$nameorref"
.PD 0
.ie n .IP "\fBReference to an \s-1ARRAY\s0\fR smokeresults are in @$nameorref" 8
.el .IP "\fBReference to an \s-1ARRAY\s0\fR smokeresults are in \f(CW@$nameorref\fR" 8
.IX Item "Reference to an ARRAY smokeresults are in @$nameorref"
.IP "\fBReference to a \s-1GLOB\s0\fR smokeresults are read from the filehandle" 8
.IX Item "Reference to a GLOB smokeresults are read from the filehandle"
.IP "\fBOther values\fR are taken as the filename for the smokeresults" 8
.IX Item "Other values are taken as the filename for the smokeresults"
.RE
.RS 4
.RE
.ie n .IP "$self\->_parse( )" 4
.el .IP "\f(CW$self\fR\->_parse( )" 4
.IX Item "$self->_parse( )"
.PD
Interpret the contents of the logfile and prepare them for processing,
so report can be made.
.ie n .IP "$self\->_post_process( )" 4
.el .IP "\f(CW$self\fR\->_post_process( )" 4
.IX Item "$self->_post_process( )"
\&\f(CW\*(C`_post_process()\*(C'\fR sets up the report for easy printing. It needs to
sort the buildenvironments, statusletters and test failures.
.ie n .IP "_\|_rm_common_args( $cfg, \e%common )" 4
.el .IP "_\|_rm_common_args( \f(CW$cfg\fR, \e%common )" 4
.IX Item "__rm_common_args( $cfg, %common )"
Removes the the arguments stored as keys in \f(CW%common\fR from \f(CW$cfg\fR.
.ie n .IP "$reporter\->write_to_file( [$name] )" 4
.el .IP "\f(CW$reporter\fR\->write_to_file( [$name] )" 4
.IX Item "$reporter->write_to_file( [$name] )"
Write the \f(CW\*(C`$self\->report\*(C'\fR to file. If name is ommitted it will
use \f(CW\*(C`catfile( $self\->{ddir}, $self\->{rptfile} )\*(C'\fR.
.ie n .IP "$reporter\->report( )" 4
.el .IP "\f(CW$reporter\fR\->report( )" 4
.IX Item "$reporter->report( )"
Return a string with the full report
.ie n .IP "$reporter\->ccinfo( )" 4
.el .IP "\f(CW$reporter\fR\->ccinfo( )" 4
.IX Item "$reporter->ccinfo( )"
Return the string containing the C\-compiler info.
.ie n .IP "$reporter\->\fIregistered_patches()\fR" 4
.el .IP "\f(CW$reporter\fR\->\fIregistered_patches()\fR" 4
.IX Item "$reporter->registered_patches()"
Return a section with the locally applied patches (from patchlevel.h).
.ie n .IP "$reporter\->harness3_options" 4
.el .IP "\f(CW$reporter\fR\->harness3_options" 4
.IX Item "$reporter->harness3_options"
Show indication of the options used for \f(CW\*(C`HARNESS_OPTIONS\*(C'\fR.
.ie n .IP "$reporter\->user_skipped_tests( )" 4
.el .IP "\f(CW$reporter\fR\->user_skipped_tests( )" 4
.IX Item "$reporter->user_skipped_tests( )"
Show indication for the fact that the user requested to skip some tests.
.ie n .IP "$reporter\->ccmessages( )" 4
.el .IP "\f(CW$reporter\fR\->ccmessages( )" 4
.IX Item "$reporter->ccmessages( )"
Use a port of Jarkko's \fIgrepccerr\fR script to report the compiler messages.
.ie n .IP "$reporter\->preamble( )" 4
.el .IP "\f(CW$reporter\fR\->preamble( )" 4
.IX Item "$reporter->preamble( )"
Returns the header of the report.
.ie n .IP "$reporter\->smoke_matrix( )" 4
.el .IP "\f(CW$reporter\fR\->smoke_matrix( )" 4
.IX Item "$reporter->smoke_matrix( )"
\&\f(CW\*(C`smoke_matrix()\*(C'\fR returns a string with the result-letters and their
configs.
.ie n .IP "$reporter\->summary( )" 4
.el .IP "\f(CW$reporter\fR\->summary( )" 4
.IX Item "$reporter->summary( )"
Return the \fB\s-1PASS\s0\fR or \fB\s-1FAIL\s0(x)\fR string.
.ie n .IP "$repoarter\->has_test_failures( )" 4
.el .IP "\f(CW$repoarter\fR\->has_test_failures( )" 4
.IX Item "$repoarter->has_test_failures( )"
Returns true if \f(CW\*(C`@{ $reporter\->{_failures}\*(C'\fR.
.ie n .IP "$reporter\->failures( )" 4
.el .IP "\f(CW$reporter\fR\->failures( )" 4
.IX Item "$reporter->failures( )"
report the failures (grouped by configurations).
.ie n .IP "$repoarter\->has_todo_passed( )" 4
.el .IP "\f(CW$repoarter\fR\->has_todo_passed( )" 4
.IX Item "$repoarter->has_todo_passed( )"
Returns true if \f(CW\*(C`@{ $reporter\->{_todo_pasesd}\*(C'\fR.
.ie n .IP "$reporter\->todo_passed( )" 4
.el .IP "\f(CW$reporter\fR\->todo_passed( )" 4
.IX Item "$reporter->todo_passed( )"
report the todo that passed (grouped by configurations).
.ie n .IP "$repoarter\->has_mani_failures( )" 4
.el .IP "\f(CW$repoarter\fR\->has_mani_failures( )" 4
.IX Item "$repoarter->has_mani_failures( )"
Returns true if \f(CW\*(C`@{ $reporter\->{_mani}\*(C'\fR.
.ie n .IP "$reporter\->mani_fail( )" 4
.el .IP "\f(CW$reporter\fR\->mani_fail( )" 4
.IX Item "$reporter->mani_fail( )"
report the \s-1MANIFEST\s0 failures.
.ie n .IP "$reporter\->bldenv_legend( )" 4
.el .IP "\f(CW$reporter\fR\->bldenv_legend( )" 4
.IX Item "$reporter->bldenv_legend( )"
Returns a string with the legend for build-environments
.ie n .IP "$reporter\->letter_legend( )" 4
.el .IP "\f(CW$reporter\fR\->letter_legend( )" 4
.IX Item "$reporter->letter_legend( )"
Returns a string with the legend for the letters in the matrix.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Smoke::Smoker
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) 2002\-2003, All rights reserved.
.PP
.Vb 1
\&  * Abe Timmerman <abeltje@cpan.org>
.Ve
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.IP "\(bu" 4
http://www.perl.com/perl/misc/Artistic.html
.IP "\(bu" 4
http://www.gnu.org/copyleft/gpl.html
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
