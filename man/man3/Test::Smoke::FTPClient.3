.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Smoke::FTPClient 3"
.TH Test::Smoke::FTPClient 3 "2010-08-27" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Smoke::FTPClient \- Implement a mirror like object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Smoke::FTPClient;
\&
\&    my $server = \*(Aqftp.linux.activestate.com\*(Aq;
\&    my $fc = Test::Smoke::FTPClient\->new( $server );
\&
\&    my $sdir = \*(Aq/pub/staff/gsar/APC/perl\-current\*(Aq;
\&    my $ddir = \*(Aq~/perlsmoke/perl\-current\*(Aq;
\&    my $cleanup = 1; # like \-\-delete for rsync
\&
\&    $fc\->connect;
\&    $fc\->mirror( $sdir, $ddir, $cleanup );
\&
\&    $fc\->bye;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module was written specifically to fetch a perl source-tree
from the \s-1APC\s0. It will not suffice as a general purpose mirror module!
It only distinguishes between files and directories and relies on the 
output of the \f(CW\*(C`Net::FTP\->dir\*(C'\fR method.
.PP
This solution is \fBslow\fR, you'd better use \fBrsync\fR!
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Test::Smoke::FTPClient\->new( $server[, %options] )"
.el .SS "Test::Smoke::FTPClient\->new( \f(CW$server\fP[, \f(CW%options\fP] )"
.IX Subsection "Test::Smoke::FTPClient->new( $server[, %options] )"
Create a new object with option checking:
.PP
.Vb 5
\&    * fuser
\&    * fpasswd
\&    * v
\&    * fpassive
\&    * ftype
.Ve
.ie n .SS "$ftpclient\->connect( )"
.el .SS "\f(CW$ftpclient\fP\->connect( )"
.IX Subsection "$ftpclient->connect( )"
Returns true for success after connecting and login.
.ie n .SS "$client\->mirror( $sdir, $ddir )"
.el .SS "\f(CW$client\fP\->mirror( \f(CW$sdir\fP, \f(CW$ddir\fP )"
.IX Subsection "$client->mirror( $sdir, $ddir )"
Set-up the environment and call \f(CW\*(C`_\|_do_mirror()\*(C'\fR
.ie n .SS "$client\->bye"
.el .SS "\f(CW$client\fP\->bye"
.IX Subsection "$client->bye"
Disconnect from the FTP-server and cleanup the Net::FTP client;
.ie n .SS "Test::Smoke::FTPClient\->config( $key[, $value] )"
.el .SS "Test::Smoke::FTPClient\->config( \f(CW$key\fP[, \f(CW$value\fP] )"
.IX Subsection "Test::Smoke::FTPClient->config( $key[, $value] )"
\&\f(CW\*(C`config()\*(C'\fR is an interface to the package lexical \f(CW%CONFIG\fR, 
which holds all the default values for the \f(CW\*(C`new()\*(C'\fR arguments.
.PP
With the special key \fBall_defaults\fR this returns a reference
to a hash holding all the default values.
.ie n .SS "_\|_do_mirror( $ftp, $ftpdir, $localdir, $lroot, $verbose, $cleanup )"
.el .SS "_\|_do_mirror( \f(CW$ftp\fP, \f(CW$ftpdir\fP, \f(CW$localdir\fP, \f(CW$lroot\fP, \f(CW$verbose\fP, \f(CW$cleanup\fP )"
.IX Subsection "__do_mirror( $ftp, $ftpdir, $localdir, $lroot, $verbose, $cleanup )"
Recursive sub to mirror a tree from an \s-1FTP\s0 server.
.ie n .SS "dirlist( $ftp, $verbose )"
.el .SS "dirlist( \f(CW$ftp\fP, \f(CW$verbose\fP )"
.IX Subsection "dirlist( $ftp, $verbose )"
Return a list of entries (hashrefs) with these properties:
.PP
.Vb 5
\&    * name:    Filename
\&    * type     f/d/l
\&    * mode     unix file mode
\&    * size     filessize in bytes
\&    * date     file date
.Ve
.ie n .SS "_\|_parse_line_from_dir( $line, $verbose )"
.el .SS "_\|_parse_line_from_dir( \f(CW$line\fP, \f(CW$verbose\fP )"
.IX Subsection "__parse_line_from_dir( $line, $verbose )"
The \f(CW\*(C`dir\*(C'\fR command in \s-1FTP\s0 gives a sort of \f(CW\*(C`ls \-la\*(C'\fR output,
parts of this output are used as remote file-info.
.ie n .SS "_\|_get_mode_from_text( $tmode )"
.el .SS "_\|_get_mode_from_text( \f(CW$tmode\fP )"
.IX Subsection "__get_mode_from_text( $tmode )"
This takes the text representation of a file-mode (like 'rwxr\*(--r\-\-')
and return the numeric value.
.ie n .SS "_\|_time_from_ls( $mname, $day, $time_or_year )"
.el .SS "_\|_time_from_ls( \f(CW$mname\fP, \f(CW$day\fP, \f(CW$time_or_year\fP )"
.IX Subsection "__time_from_ls( $mname, $day, $time_or_year )"
This takes the three date/time related columns from the \f(CW\*(C`ls \-la\*(C'\fR output
and returns a localtime-stamp.
.ie n .SS "_\|_time_from_windows( $date, $time )"
.el .SS "_\|_time_from_windows( \f(CW$date\fP, \f(CW$time\fP )"
.IX Subsection "__time_from_windows( $date, $time )"
This takes the two date/time related columns from the \f(CW\*(C`dir\*(C'\fR output
and returns a localtime-stamp
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Smoke::Syncer
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
(c) 2003, 2004, 2005, Abe Timmerman <abeltje@cpan.org> All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.PP
.Vb 2
\&  * <http://www.perl.com/perl/misc/Artistic.html>,
\&  * <http://www.gnu.org/copyleft/gpl.html>
.Ve
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
