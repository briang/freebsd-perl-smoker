.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Smoke::SysInfo 3"
.TH Test::Smoke::SysInfo 3 "2010-11-01" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Smoke::SysInfo \- OO interface to system specific information
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Smoke::SysInfo;
\&
\&    my $si = Test::Smoke::SysInfo\->new;
\&
\&    printf "Hostname: %s\en", $si\->host;
\&    printf "Number of CPU\*(Aqs: %s\en", $si\->ncpu;
\&    printf "Processor type: %s\en", $si\->cpu_type;   # short
\&    printf "Processor description: %s\en", $si\->cpu; # long
\&    printf "OS and version: %s\en", $si\->os;
.Ve
.PP
or
.PP
.Vb 2
\&    use Test::Smoke::SysInfo qw( sysinfo );
\&    printf "[%s]\en", sysinfo();
.Ve
.PP
or
.PP
.Vb 1
\&    $ perl \-MTest::Smoke::SysInfo=tsuname \-le print+tsuname
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sometimes one wants a more eleborate description of the system one is
smoking.
.SH "METHODS"
.IX Header "METHODS"
.SS "Test::Smoke::SysInfo\->new( )"
.IX Subsection "Test::Smoke::SysInfo->new( )"
Dispatch to one of the OS-specific subs.
.SS "_\|_get_os( )"
.IX Subsection "__get_os( )"
This is the short info string about the Operating System.
.SS "_\|_get_cpu_type( )"
.IX Subsection "__get_cpu_type( )"
This is the short info string about the cpu-type. The \s-1POSIX\s0 module
should provide one (portably) with \f(CW\*(C`POSIX::uname()\*(C'\fR.
.SS "_\|_get_cpu( )"
.IX Subsection "__get_cpu( )"
We do not have a portable way to get this information, so assign
\&\f(CW\*(C`_cpu_type\*(C'\fR to it.
.SS "_\|_get_hostname( )"
.IX Subsection "__get_hostname( )"
Get the hostname from \f(CW\*(C`POSIX::uname()\*(C'\fR.
.SS "Generic( )"
.IX Subsection "Generic( )"
Get the information from \f(CW\*(C`POSIX::uname()\*(C'\fR
.SS "\s-1AIX\s0( )"
.IX Subsection "AIX( )"
Use the lsdev program to find information.
.SS "\s-1HPUX\s0( )"
.IX Subsection "HPUX( )"
Use the ioscan, getconf and machinfo programs to find information.
.PP
This routine was contributed by Rich Rauenzahn.
.SS "\s-1BSD\s0( )"
.IX Subsection "BSD( )"
Use the sysctl program to find information.
.SS "Darwin( )"
.IX Subsection "Darwin( )"
If the system_profiler program is accessible (meaning that this is
Mac \s-1OS\s0 X), use it to find information; otherwise treat as \*(L"\s-1BSD\s0\*(R".
.PP
This sub was donated by Dominic Dunlup.
.SS "\s-1IRIX\s0( )"
.IX Subsection "IRIX( )"
Use the hinv program to get the system information.
.ie n .SS "_\|_from_proc_cpuinfo( $key, $lines )"
.el .SS "_\|_from_proc_cpuinfo( \f(CW$key\fP, \f(CW$lines\fP )"
.IX Subsection "__from_proc_cpuinfo( $key, $lines )"
Helper function to get information from \fI/proc/cpuinfo\fR
.SS "Linux( )"
.IX Subsection "Linux( )"
Use the \f(CW\*(C`/proc/cpuinfo\*(C'\fR pseudofile to get the system information.
.SS "Linux_sparc( )"
.IX Subsection "Linux_sparc( )"
Linux on sparc architecture seems too different from intel
.SS "Linux_ppc( )"
.IX Subsection "Linux_ppc( )"
Linux on ppc architecture seems too different from intel
.SS "Solaris( )"
.IX Subsection "Solaris( )"
Use the psrinfo program to get the system information.
Used also in Tru64 (osf).
.SS "Windows( )"
.IX Subsection "Windows( )"
Use the \f(CW%ENV\fR hash to find information. Fall back on the *::Generic
values if these values have been unset or are unavailable (sorry I do
not have Win9[58]).
.PP
Use Win32::TieRegistry if available to get better information.
.SS "\s-1\fIVMS\s0()\fP"
.IX Subsection "VMS()"
Use some \s-1VMS\s0 specific stuff to get system information. These were
suggested by Craig Berry.
.SS "sysinfo( )"
.IX Subsection "sysinfo( )"
\&\f(CW\*(C`sysinfo()\*(C'\fR returns a string with \f(CW\*(C`host\*(C'\fR, \f(CW\*(C`os\*(C'\fR and \f(CW\*(C`cpu_type\*(C'\fR.
.ie n .SS "tsuname( @args )"
.el .SS "tsuname( \f(CW@args\fP )"
.IX Subsection "tsuname( @args )"
This class gathers most of the \f(CWuname(1)\fR info, make a comparable
version. Takes almost the same arguments:
.PP
.Vb 6
\&    a for all (can be omitted)
\&    n for nodename
\&    s for os name and version
\&    m for cpu name
\&    c for cpu count
\&    p for cpu_type
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Smoke::Smoker, Test::Smoke::Reporter
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) 2002\-2006, Abe Timmerman <abeltje@cpan.org> All rights reserved.
.PP
With contributions from Jarkko Hietaniemi, Merijn Brand, Campo
Weijerman, Alan Burlison, Allen Smith, Alain Barbet, Dominic Dunlop,
Rich Rauenzahn, David Cantrell.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.IP "\(bu" 4
http://www.perl.com/perl/misc/Artistic.html
.IP "\(bu" 4
http://www.gnu.org/copyleft/gpl.html
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
