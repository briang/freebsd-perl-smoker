.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Smoke::BuildCFG 3"
.TH Test::Smoke::BuildCFG 3 "2010-08-27" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Smoke::BuildCFG \- OO interface for handling build configurations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Smoke::BuildCFG;
\&
\&    my $name = \*(Aqperlcurrent.cfg\*(Aq;
\&    my $bcfg = Test::Smoke::BuildCFG\->new( $name );
\&
\&    foreach my $config ( $bcfg\->configurations ) {
\&        # do somthing with $config
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handle the build configurations
.SH "METHODS"
.IX Header "METHODS"
.IP "Test::Smoke::BuildCFG\->new( [$cfgname] )" 4
.IX Item "Test::Smoke::BuildCFG->new( [$cfgname] )"
[ Constructor | Public ]
.Sp
Initialise a new object.
.ie n .IP "Test::Smoke::BuildCFG\->continue( $logfile[, $cfgname, %options] )" 4
.el .IP "Test::Smoke::BuildCFG\->continue( \f(CW$logfile\fR[, \f(CW$cfgname\fR, \f(CW%options\fR] )" 4
.IX Item "Test::Smoke::BuildCFG->continue( $logfile[, $cfgname, %options] )"
[Constructor | public]
.Sp
Initialize a new object without the configurations that have already
been fully processed. If *all* configurations have been processed,
just pass the equivalent of the \f(CW\*(C`new()\*(C'\fR method.
.ie n .IP "Test::Smoke::BuildCFG\->config( $key[, $value] )" 4
.el .IP "Test::Smoke::BuildCFG\->config( \f(CW$key\fR[, \f(CW$value\fR] )" 4
.IX Item "Test::Smoke::BuildCFG->config( $key[, $value] )"
[ Accessor | Public ]
.Sp
\&\f(CW\*(C`config()\*(C'\fR is an interface to the package lexical \f(CW%CONFIG\fR, 
which holds all the default values for the \f(CW\*(C`new()\*(C'\fR arguments.
.Sp
With the special key \fBall_defaults\fR this returns a reference
to a hash holding all the default values.
.ie n .IP "$self\->read_parse( $cfgname )" 4
.el .IP "\f(CW$self\fR\->read_parse( \f(CW$cfgname\fR )" 4
.IX Item "$self->read_parse( $cfgname )"
\&\f(CW\*(C`read_parse()\*(C'\fR reads the build configurations file and parses it.
.ie n .IP "$self\->_read( $nameorref )" 4
.el .IP "\f(CW$self\fR\->_read( \f(CW$nameorref\fR )" 4
.IX Item "$self->_read( $nameorref )"
\&\f(CW\*(C`_read()\*(C'\fR is a private method that handles the reading.
.RS 4
.ie n .IP "\fBReference to a \s-1SCALAR\s0\fR build configurations are in $$nameorref" 4
.el .IP "\fBReference to a \s-1SCALAR\s0\fR build configurations are in \f(CW$$nameorref\fR" 4
.IX Item "Reference to a SCALAR build configurations are in $$nameorref"
.PD 0
.ie n .IP "\fBReference to an \s-1ARRAY\s0\fR build configurations are in @$nameorref" 4
.el .IP "\fBReference to an \s-1ARRAY\s0\fR build configurations are in \f(CW@$nameorref\fR" 4
.IX Item "Reference to an ARRAY build configurations are in @$nameorref"
.IP "\fBReference to a \s-1GLOB\s0\fR build configurations are read from the filehandle" 4
.IX Item "Reference to a GLOB build configurations are read from the filehandle"
.IP "\fBOther values\fR are taken as the filename for the build configurations" 4
.IX Item "Other values are taken as the filename for the build configurations"
.RE
.RS 4
.RE
.ie n .IP "$self\->_parse( )" 4
.el .IP "\f(CW$self\fR\->_parse( )" 4
.IX Item "$self->_parse( )"
.PD
\&\f(CW\*(C`_parse()\*(C'\fR will split the build configurations file in sections.
Sections are ended with a line that begins with an equals-sign ('=').
.Sp
There are two types of section
.RS 4
.IP "\fBbuildopt-section\fR" 8
.IX Item "buildopt-section"
.PD 0
.IP "\fBpolicy-section\fR" 8
.IX Item "policy-section"
.PD
A \fBpolicy-section\fR contains a \*(L"target-option\*(R". This is a build option 
that should be in the ccflags variable in the \fIPolicy.sh\fR file 
(see also Test::Smoke::Policy) and starts with a (forward) slash ('/').
.Sp
A \fBpolicy-section\fR can have only one (1) target-option.
.RE
.RS 4
.RE
.ie n .IP "$self\->_serialize( )" 4
.el .IP "\f(CW$self\fR\->_serialize( )" 4
.IX Item "$self->_serialize( )"
\&\f(CW\*(C`_serialize()\*(C'\fR creates a list of \fBTest::Smoke::BuildCFG::Config\fR 
objects from the parsed sections.
.ie n .IP "_\|_build_list( $list, $previous_args, $policy_subst, $this_cfg, @cfgs )" 4
.el .IP "_\|_build_list( \f(CW$list\fR, \f(CW$previous_args\fR, \f(CW$policy_subst\fR, \f(CW$this_cfg\fR, \f(CW@cfgs\fR )" 4
.IX Item "__build_list( $list, $previous_args, $policy_subst, $this_cfg, @cfgs )"
Recursive sub, mainly taken from the old \f(CW\*(C`run_tests()\*(C'\fR in \fImktest.pl\fR
.ie n .IP "$buildcfg\->configurations( )" 4
.el .IP "\f(CW$buildcfg\fR\->configurations( )" 4
.IX Item "$buildcfg->configurations( )"
Returns the list of configurations (Test::Smoke::BuildCFG::Config objects)
.ie n .IP "$buildcfg\->policy_targets( )" 4
.el .IP "\f(CW$buildcfg\fR\->policy_targets( )" 4
.IX Item "$buildcfg->policy_targets( )"
Returns a list of policytargets from the policy substitution sections
.IP "as_string" 4
.IX Item "as_string"
Return the parsed configuration as a string.
.ie n .IP "_\|_get_smoked_configs( $logfile )" 4
.el .IP "_\|_get_smoked_configs( \f(CW$logfile\fR )" 4
.IX Item "__get_smoked_configs( $logfile )"
Parse the logfile and return a hash(ref) of already processed
configurations.
.IP "Test::Smoke::BuildCFG\->\fIdefault_buildcfg()\fR" 4
.IX Item "Test::Smoke::BuildCFG->default_buildcfg()"
This is a constant that returns a textversion of the default 
configuration.
.ie n .IP "new_configuration( $config )" 4
.el .IP "new_configuration( \f(CW$config\fR )" 4
.IX Item "new_configuration( $config )"
A wrapper around \f(CW\*(C`Test::Smoke::BuildCFG::Config\->new()\*(C'\fR so the
object is accessible from outside this package.
.SH "PACKAGE"
.IX Header "PACKAGE"
Test::Smoke::BuildCFG::Config \- \s-1OO\s0 interface for a build confiuration
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $bcfg = Test::Smoke::BuildCFG::Config\->new( $args, $policy );
.Ve
.PP
or
.PP
.Vb 4
\&    my $bcfg = Test::Smoke::BuildCFG::Config\->new;
\&    $bcfg\->args( $args );
\&    $bcfg\->policy( [ \-DDEBUGGING => \*(Aq\-DDEBUGGING\*(Aq ], 
\&                   [ \-DPERL_COPY_ON_WRITE => \*(Aq\*(Aq ] );
\&
\&    if ( $bcfg\->has_arg( \*(Aq\-Duseithreads\*(Aq ) ) {
\&        # do stuff for \-Duseithreads
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple object that holds both the build arguments and the 
policy substitutions. The build arguments are stored as a string and
the policy subtitutions are stored as a list of lists. Each substitution is
represented as a list with the two elements: the target and its substitute.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "Test::Smoke::BuildCFG::Config\->new( [ $args[, \e@policy_substs ]] )" 4
.el .IP "Test::Smoke::BuildCFG::Config\->new( [ \f(CW$args\fR[, \e@policy_substs ]] )" 4
.IX Item "Test::Smoke::BuildCFG::Config->new( [ $args[, @policy_substs ]] )"
Create the new object as an anonymous list.
.ie n .IP "$buildcfg\->args( [$args] )" 4
.el .IP "\f(CW$buildcfg\fR\->args( [$args] )" 4
.IX Item "$buildcfg->args( [$args] )"
Accessor for the build arguments field.
.ie n .IP "$buildcfg\->policy( [@substitutes] )" 4
.el .IP "\f(CW$buildcfg\fR\->policy( [@substitutes] )" 4
.IX Item "$buildcfg->policy( [@substitutes] )"
Accessor for the policy substitutions.
.ie n .IP "$self\->_split_args( )" 4
.el .IP "\f(CW$self\fR\->_split_args( )" 4
.IX Item "$self->_split_args( )"
Create a hash with all the build arguments as keys.
.ie n .IP "$buildcfg\->has_arg( $arg[,...] )" 4
.el .IP "\f(CW$buildcfg\fR\->has_arg( \f(CW$arg\fR[,...] )" 4
.IX Item "$buildcfg->has_arg( $arg[,...] )"
Check the build arguments hash for \f(CW$arg\fR. If you specify more then one 
the results will be logically ANDed!
.ie n .IP "$buildcfg\->any_arg( $arg[,...] )" 4
.el .IP "\f(CW$buildcfg\fR\->any_arg( \f(CW$arg\fR[,...] )" 4
.IX Item "$buildcfg->any_arg( $arg[,...] )"
Check the build arguments hash for \f(CW$arg\fR. If you specify more then one 
the results will be logically ORed!
.ie n .IP "$buildcfg\->args_eq( $args )" 4
.el .IP "\f(CW$buildcfg\fR\->args_eq( \f(CW$args\fR )" 4
.IX Item "$buildcfg->args_eq( $args )"
\&\f(CW\*(C`args_eq()\*(C'\fR takes a string of config arguments and returns true if
\&\f(CW$self\fR has exactly the same args as the \f(CW$args\fR has.
.Sp
There is the small matter of default_args (dfopts) kept as a Class
variable in Test::Smoke::BuildCFG!
.ie n .IP "rm_arg( $arg[,..] )" 4
.el .IP "rm_arg( \f(CW$arg\fR[,..] )" 4
.IX Item "rm_arg( $arg[,..] )"
Simply remove the argument(s) from the list and recreate the arguments
line.
.ie n .IP "$config\->vms" 4
.el .IP "\f(CW$config\fR\->vms" 4
.IX Item "$config->vms"
Redo the the commandline switches in a VMSish way.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Smoke::Smoker, Test::Smoke::Syncer::Policy
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) 2002\-2003, All rights reserved.
.PP
.Vb 1
\&  * Abe Timmerman <abeltje@cpan.org>
.Ve
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.IP "\(bu" 4
http://www.perl.com/perl/misc/Artistic.html
.IP "\(bu" 4
http://www.gnu.org/copyleft/gpl.html
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
