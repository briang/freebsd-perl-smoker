.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Smoke::Mailer 3"
.TH Test::Smoke::Mailer 3 "2010-08-27" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Smoke::Mailer \- Wrapper to send the report.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Smoke::Mailer;
\&
\&    my %args = ( mhowto => \*(Aqsmtp\*(Aq, mserver => \*(Aqsmtp.your.domain\*(Aq );
\&    my $mailer = Test::Smoke::Mailer\->new( $ddir, %args );
\&
\&    $mailer\->mail or die "Problem in mailing: " . $mailer\->error;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This little wrapper still allows you to use the \fBsendmail\fR, 
\&\fBmail\fR or \fBmailx\fR programs, but prefers to use the \fBMail::Sendmail\fR
module (which comes with this distribution) to send the reports.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "Test::Smoke::Mailer\->new( $mailer[, %args] )" 4
.el .IP "Test::Smoke::Mailer\->new( \f(CW$mailer\fR[, \f(CW%args\fR] )" 4
.IX Item "Test::Smoke::Mailer->new( $mailer[, %args] )"
Can we provide sensible defaults for the mail stuff?
.Sp
.Vb 6
\&    mhowto  => [Module::Name|sendmail|mail|mailx]
\&    mserver => an SMTP server || localhost
\&    mbin    => the full path to the mail binary
\&    mto     => list of addresses (comma separated!)
\&    mfrom   => single address
\&    mcc     => list of addresses (coma separated!)
.Ve
.ie n .IP "$mailer\->fetch_report( )" 4
.el .IP "\f(CW$mailer\fR\->fetch_report( )" 4
.IX Item "$mailer->fetch_report( )"
\&\f(CW\*(C`fetch_report()\*(C'\fR reads \fBmktest.rpt\fR from \f(CW\*(C`{ddir}\*(C'\fR and return the
subject line for the mail-message.
.ie n .IP "$mailer\->error( )" 4
.el .IP "\f(CW$mailer\fR\->error( )" 4
.IX Item "$mailer->error( )"
\&\f(CW\*(C`error()\*(C'\fR returns the value of \f(CW\*(C`$mailer\->{error}\*(C'\fR.
.ie n .IP "$self\->_get_cc( $subject )" 4
.el .IP "\f(CW$self\fR\->_get_cc( \f(CW$subject\fR )" 4
.IX Item "$self->_get_cc( $subject )"
\&\f(CW\*(C`_get_cc()\*(C'\fR implements the \f(CW\*(C`\-\-ccp5p_onfail\*(C'\fR option. It looks at the
subject to see if the smoke FAILed and then adds the \fIperl5\-porters\fR
mailing-list to the \f(CW\*(C`Cc:\*(C'\fR field unless it is already part of \f(CW\*(C`To:\*(C'\fR
or \f(CW\*(C`Cc:\*(C'\fR.
.Sp
The new behaviour is to only return \f(CW\*(C`Cc:\*(C'\fR on fail. This is determined
by the new global regex kept in \f(CW$Test::Smoke::Mailer::NOCC_RE\fR.
.ie n .IP "Test::Smoke::Mailer\->config( $key[, $value] )" 4
.el .IP "Test::Smoke::Mailer\->config( \f(CW$key\fR[, \f(CW$value\fR] )" 4
.IX Item "Test::Smoke::Mailer->config( $key[, $value] )"
\&\f(CW\*(C`config()\*(C'\fR is an interface to the package lexical \f(CW%CONFIG\fR, 
which holds all the default values for the \f(CW\*(C`new()\*(C'\fR arguments.
.Sp
With the special key \fBall_defaults\fR this returns a reference
to a hash holding all the default values.
.SH "Test::Smoke::Mailer::Sendmail"
.IX Header "Test::Smoke::Mailer::Sendmail"
This handles sending the message by piping it to the \fBsendmail\fR program.
.ie n .IP "Test::Smoke::Mailer::Sendmail\->new( %args )" 4
.el .IP "Test::Smoke::Mailer::Sendmail\->new( \f(CW%args\fR )" 4
.IX Item "Test::Smoke::Mailer::Sendmail->new( %args )"
Keys for \f(CW%args\fR:
.Sp
.Vb 6
\&  * ddir
\&  * sendmailbin
\&  * to
\&  * from
\&  * cc
\&  * v
.Ve
.ie n .IP "$mailer\->mail( )" 4
.el .IP "\f(CW$mailer\fR\->mail( )" 4
.IX Item "$mailer->mail( )"
\&\f(CW\*(C`mail()\*(C'\fR sets up a header and body and pipes them to the \fBsendmail\fR
program.
.SH "Test::Smoke::Mailer::Mail_X"
.IX Header "Test::Smoke::Mailer::Mail_X"
This handles sending the message with either the \fBmail\fR or \fBmailx\fR program.
.ie n .IP "Test::Smoke::Mailer::Mail_X\->new( %args )" 4
.el .IP "Test::Smoke::Mailer::Mail_X\->new( \f(CW%args\fR )" 4
.IX Item "Test::Smoke::Mailer::Mail_X->new( %args )"
Keys for \f(CW%args\fR:
.Sp
.Vb 5
\&  * ddir
\&  * mailbin/mailxbin
\&  * to
\&  * cc
\&  * v
.Ve
.ie n .IP "$mailer\->mail( )" 4
.el .IP "\f(CW$mailer\fR\->mail( )" 4
.IX Item "$mailer->mail( )"
\&\f(CW\*(C`mail()\*(C'\fR sets up the commandline and body and pipes it to either the 
\&\fBmail\fR or the \fBmailx\fR program.
.SH "Test::Smoke::Mailer::Mail_Sendmail"
.IX Header "Test::Smoke::Mailer::Mail_Sendmail"
This handles sending the message using the \fBMail::Sendmail\fR module.
.ie n .IP "Test::Smoke::Mailer::Mail_Sendmail\->new( %args )" 4
.el .IP "Test::Smoke::Mailer::Mail_Sendmail\->new( \f(CW%args\fR )" 4
.IX Item "Test::Smoke::Mailer::Mail_Sendmail->new( %args )"
Keys for \f(CW%args\fR:
.Sp
.Vb 6
\&  * ddir
\&  * mserver
\&  * to
\&  * from
\&  * cc
\&  * v
.Ve
.ie n .IP "$mailer\->mail( )" 4
.el .IP "\f(CW$mailer\fR\->mail( )" 4
.IX Item "$mailer->mail( )"
\&\f(CW\*(C`mail()\*(C'\fR sets up the message to be send by \fBMail::Sendmail\fR.
.SH "Test::Smoke::Mailer::MIME_Lite"
.IX Header "Test::Smoke::Mailer::MIME_Lite"
This handles sending the message using the \fBMIME::Lite\fR module.
.ie n .IP "Test::Smoke::Mailer::MIME_Lite\->new( %args )" 4
.el .IP "Test::Smoke::Mailer::MIME_Lite\->new( \f(CW%args\fR )" 4
.IX Item "Test::Smoke::Mailer::MIME_Lite->new( %args )"
Keys for \f(CW%args\fR:
.Sp
.Vb 6
\&  * ddir
\&  * mserver
\&  * to
\&  * from
\&  * cc
\&  * v
.Ve
.ie n .IP "$mailer\->mail( )" 4
.el .IP "\f(CW$mailer\fR\->mail( )" 4
.IX Item "$mailer->mail( )"
\&\f(CW\*(C`mail()\*(C'\fR sets up the message to be send by \fBMIME::Lite\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) 2002\-2003, All rights reserved.
.PP
.Vb 1
\&  * Abe Timmerman <abeltje@cpan.org>
.Ve
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.PP
.Vb 2
\&  * <http://www.perl.com/perl/misc/Artistic.html>,
\&  * <http://www.gnu.org/copyleft/gpl.html>
.Ve
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
