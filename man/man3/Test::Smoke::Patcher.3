.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Smoke::Patcher 3"
.TH Test::Smoke::Patcher 3 "2010-08-27" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Smoke::Patcher \- OO interface to help patching the source\-tree
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Smoke::Patcher;
\&
\&    my $patcher = Test::Smoke::Patcher\->new( single => {
\&        ddir  => $build_dir,
\&        pfile => $patch,
\&        popts => \*(Aq\-p1\*(Aq,
\&        v     => 1, # 0..2
\&    });
\&    $patcher\->patch;
.Ve
.PP
or
.PP
.Vb 6
\&    my $patcher = Test::Smoke::Patcher\->new( multi => {
\&        ddir  => $buildir,
\&        pfile => $patch_info,
\&        v     => 1, #0..2
\&    });
\&    $patcher\->patch;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Okay, you will need a working \fBpatch\fR program, which I believe is available
for most platforms perl runs on.
.PP
There are two ways to initialise the \fBTest::Smoke::Patcher\fR object.
.IP "\fBsingle\fR mode" 4
.IX Item "single mode"
The \fBpfile\fR attribute is a pointer to a \fIsingle\fR patch. 
There are four (4) ways to specify that patch.
.RS 4
.IP "\fIrefernece to a \s-1SCALAR\s0\fR" 4
.IX Item "refernece to a SCALAR"
The scalar holds the complete patch as literal text.
.IP "\fIreference to an \s-1ARRAY\s0\fR" 4
.IX Item "reference to an ARRAY"
The array holds a list of lines (with newlines) that make up the
patch as literal text (\f(CW\*(C`$patch = join "", @$array_ref\*(C'\fR).
.IP "\fIreference to a \s-1GLOB\s0\fR" 4
.IX Item "reference to a GLOB"
You passed an opened filehandle to a file containing the patch.
.IP "\fIfilename\fR" 4
.IX Item "filename"
If none of the above apply, it is assumed you passed a filename. 
Relative paths are rooted at the builddir (\fBddir\fR attribute).
.RE
.RS 4
.RE
.IP "\fBmulti\fR mode" 4
.IX Item "multi mode"
The \fBpfile\fR attribute is a pointer to a recource that contains filenames
of patches. 
The format of this recource is one filename per line optionally followed
by a semi-colon (;) and switches for the patch program.
.Sp
The patch-resource can also be specified in four (4) ways.
.RS 4
.IP "\fIreference to a \s-1SCALAR\s0\fR" 4
.IX Item "reference to a SCALAR"
.PD 0
.IP "\fIreference to an \s-1ARRAY\s0\fR" 4
.IX Item "reference to an ARRAY"
.IP "\fIreference to a \s-1GLOB\s0\fR" 4
.IX Item "reference to a GLOB"
.IP "\fIfilename\fR" 4
.IX Item "filename"
.RE
.RS 4
.RE
.PD
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "Test::Smoke::Patcher\->new( $type => \e%args );" 4
.el .IP "Test::Smoke::Patcher\->new( \f(CW$type\fR => \e%args );" 4
.IX Item "Test::Smoke::Patcher->new( $type => %args );"
\&\f(CW\*(C`new()\*(C'\fR crates the object. Valid types are \fBsingle\fR and \fBmulti\fR.
Valid keys for \f(CW%args\fR:
.Sp
.Vb 6
\&    * ddir:     the build directory
\&    * fdir:     the intermediate forest dir (preferred)
\&    * pfile:    path to either the patch (single) or a textfile (multi)
\&    * popts:    options to pass to \*(Aqpatch\*(Aq (\-p1)
\&    * patchbin: full path to the patch binary (patch)
\&    * v:        verbosity 0..2
.Ve
.ie n .IP "Test::Smoke::Patcher\->config( $key[, $value] )" 4
.el .IP "Test::Smoke::Patcher\->config( \f(CW$key\fR[, \f(CW$value\fR] )" 4
.IX Item "Test::Smoke::Patcher->config( $key[, $value] )"
\&\f(CW\*(C`config()\*(C'\fR is an interface to the package lexical \f(CW%CONFIG\fR, 
which holds all the default values for the \f(CW\*(C`new()\*(C'\fR arguments.
.Sp
With the special key \fBall_defaults\fR this returns a reference
to a hash holding all the default values.
.ie n .IP "$patcher\->patch" 4
.el .IP "\f(CW$patcher\fR\->patch" 4
.IX Item "$patcher->patch"
\&\f(CW\*(C`patch()\*(C'\fR is a simple dispatcher.
.IP "perl_regen_headers( )" 4
.IX Item "perl_regen_headers( )"
Try to run \fIregen_headers.pl\fR if the flag is set.
.ie n .IP "$patcher\->patch_single( )" 4
.el .IP "\f(CW$patcher\fR\->patch_single( )" 4
.IX Item "$patcher->patch_single( )"
\&\f(CW\*(C`patch_single()\*(C'\fR checks if the \fBpfile\fR attribute is a plain scalar 
or a ref to a scalar, array, glob. In the first case this is taken to
be a filename.  A GLOB-ref is a filehandle, the other two are taken to 
be literal content.
.ie n .IP "$patcher\->patch_multi( )" 4
.el .IP "\f(CW$patcher\fR\->patch_multi( )" 4
.IX Item "$patcher->patch_multi( )"
\&\f(CW\*(C`patch_multi()\*(C'\fR checks the \fBpfile\fR attribute is a plain scalar 
or a ref to a scalar, array, glob. In the first case this is taken to
be a filename.  A GLOB-ref is a filehandle, the other two are taken to 
be literal content.
.ie n .IP "$self\->_make_opts( $switches )" 4
.el .IP "\f(CW$self\fR\->_make_opts( \f(CW$switches\fR )" 4
.IX Item "$self->_make_opts( $switches )"
\&\f(CW\*(C`_make_opts()\*(C'\fR just creates a string of options to pass to the
\&\fBpatch\fR program. Some implementations of patch do not grog '\-u',
so be careful!
.ie n .IP "$patcher\->call_patch( $ref_to_content )" 4
.el .IP "\f(CW$patcher\fR\->call_patch( \f(CW$ref_to_content\fR )" 4
.IX Item "$patcher->call_patch( $ref_to_content )"
\&\f(CW\*(C`call_patch()\*(C'\fR opens a pipe to the \fBpatch\fR program and prints 
\&\f(CW$$ref_to_content\fR to it. It will \fICarp::croak()\fR on any error!
.SH "SEE ALSO"
.IX Header "SEE ALSO"
patch, Test::Smoke::Syncer::Snapshot
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) 2002\-2003, All rights reserved.
.PP
.Vb 1
\&  * Abe Timmerman <abeltje@cpan.org>
.Ve
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.IP "\(bu" 4
http://www.perl.com/perl/misc/Artistic.html
.IP "\(bu" 4
http://www.gnu.org/copyleft/gpl.html
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
