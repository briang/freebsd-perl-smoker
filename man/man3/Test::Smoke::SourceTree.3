.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Smoke::SourceTree 3"
.TH Test::Smoke::SourceTree 3 "2010-11-02" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Smoke::SourceTree \- Manipulate the perl source\-tree
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Smoke::SourceTree qw( :mani_const );
\&
\&    my $tree = Test::Smoke::SourceTree\->new( $tree_dir );
\&
\&    my $mani_check = $tree\->check_MANIFEST;
\&    foreach my $file ( sort keys %$mani_check ) {
\&        if ( $mani_check\->{ $file } == ST_MISSING ) {
\&            print "MANIFEST declared \*(Aq$file\*(Aq but it is missing\en";
\&        } elsif ( $mani_check\->{ $file } == ST_UNDECLARED ) {
\&            print "MANIFEST did not declare \*(Aq$file\*(Aq\en";
\&        }
\&    }
\&
\&    $tree\->clean_from_MANIFEST;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.ie n .IP "Test::Smoke::SourceTree\->new( $tree_dir )" 4
.el .IP "Test::Smoke::SourceTree\->new( \f(CW$tree_dir\fR )" 4
.IX Item "Test::Smoke::SourceTree->new( $tree_dir )"
\&\f(CW\*(C`new()\*(C'\fR creates a new object, this is a simple scalar containing
\&\f(CW\*(C`File::Spec\->rel2abs( $tree_dir)\*(C'\fR.
.ie n .IP "$tree\->canonpath( )" 4
.el .IP "\f(CW$tree\fR\->canonpath( )" 4
.IX Item "$tree->canonpath( )"
\&\f(CW\*(C`canonpath()\*(C'\fR returns the canonical name for the path, 
see File::Spec.
.ie n .IP "$tree\->rel2abs( [$base_dir] )" 4
.el .IP "\f(CW$tree\fR\->rel2abs( [$base_dir] )" 4
.IX Item "$tree->rel2abs( [$base_dir] )"
\&\f(CW\*(C`rel2abs()\*(C'\fR returns the absolute path, see File::Spec.
.ie n .IP "$tree\->abs2rel( [$base_dir] )" 4
.el .IP "\f(CW$tree\fR\->abs2rel( [$base_dir] )" 4
.IX Item "$tree->abs2rel( [$base_dir] )"
\&\f(CW\*(C`abs2rel()\*(C'\fR returns  a relative path, 
see File::Spec.
.ie n .IP "$tree\->mani2abs( $file[, $base_path] )" 4
.el .IP "\f(CW$tree\fR\->mani2abs( \f(CW$file\fR[, \f(CW$base_path\fR] )" 4
.IX Item "$tree->mani2abs( $file[, $base_path] )"
\&\f(CW\*(C`mani2abs()\*(C'\fR returns the absolute filename of \f(CW$file\fR, which should 
be in \*(L"\s-1MANIFEST\s0\*(R" format (i.e. using '/' as directory separator).
.ie n .IP "$tree\->mani2absdir( $dir[, $base_path] )" 4
.el .IP "\f(CW$tree\fR\->mani2absdir( \f(CW$dir\fR[, \f(CW$base_path\fR] )" 4
.IX Item "$tree->mani2absdir( $dir[, $base_path] )"
\&\f(CW\*(C`mani2abs()\*(C'\fR returns the absolute dirname of \f(CW$dir\fR, which should 
be in \*(L"\s-1MANIFEST\s0\*(R" format (i.e. using '/' as directory separator).
.ie n .IP "$tree\->abs2mani( $file )" 4
.el .IP "\f(CW$tree\fR\->abs2mani( \f(CW$file\fR )" 4
.IX Item "$tree->abs2mani( $file )"
\&\f(CW\*(C`abs2mani()\*(C'\fR returns the \s-1MANIFEST\s0 style filename.
.ie n .IP "$tree\->check_MANIFEST( @ignore )" 4
.el .IP "\f(CW$tree\fR\->check_MANIFEST( \f(CW@ignore\fR )" 4
.IX Item "$tree->check_MANIFEST( @ignore )"
\&\f(CW\*(C`check_MANIFEST()\*(C'\fR reads the \fB\s-1MANIFEST\s0\fR file from \f(CW$$self\fR and
compares it with the actual contents of \f(CW$$self\fR.
.Sp
Returns a hashref with suspicious entries (if any) as keys that have a 
value of either \fB\s-1ST_MISSING\s0\fR (not in directory) or \fB\s-1ST_UNDECLARED\s0\fR
(not in \s-1MANIFEST\s0).
.ie n .IP "$self\->_read_mani_file( $path[, $no_croak] )" 4
.el .IP "\f(CW$self\fR\->_read_mani_file( \f(CW$path\fR[, \f(CW$no_croak\fR] )" 4
.IX Item "$self->_read_mani_file( $path[, $no_croak] )"
\&\f(CW\*(C`_read_mani_file()\*(C'\fR reads the contents of \f(CW$path\fR like it is a
\&\s-1MANIFEST\s0 typeof file and returns a ref to hash with all values set
\&\f(CW\*(C`ST_MISSING\*(C'\fR.
.ie n .IP "$tree\->clean_from_MANIFEST( )" 4
.el .IP "\f(CW$tree\fR\->clean_from_MANIFEST( )" 4
.IX Item "$tree->clean_from_MANIFEST( )"
\&\f(CW\*(C`clean_from_MANIFEST()\*(C'\fR removes all files from the source-tree that are
not declared in the \fB\s-1MANIFEST\s0\fR file.
.ie n .IP "copy_from_MANIFEST( $dest_dir[, $verbose] )" 4
.el .IP "copy_from_MANIFEST( \f(CW$dest_dir\fR[, \f(CW$verbose\fR] )" 4
.IX Item "copy_from_MANIFEST( $dest_dir[, $verbose] )"
\&\f(CW\*(C`_copy_from_MANIFEST()\*(C'\fR uses the \fB\s-1MANIFEST\s0\fR file from \f(CW$$self\fR
to copy a source-tree to \f(CW$dest_dir\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) 2002\-2003, All rights reserved.
.PP
.Vb 1
\&  * Abe Timmerman <abeltje@cpan.org>
.Ve
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.IP "\(bu" 4
<http://www.perl.com/perl/misc/Artistic.html>
.IP "\(bu" 4
<http://www.gnu.org/copyleft/gpl.html>
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
