.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Smoke::Smoker 3"
.TH Test::Smoke::Smoker 3 "2010-08-27" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Smoke::Smoker \- OO interface to do one smoke cycle.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Test::Smoke;
\&    use Test::Smoke::Smoker;
\&
\&    open LOGFILE, "> mktest.out" or die "Cannot create \*(Aqmktest.out\*(Aq: $!";
\&    my $buildcfg = Test::SmokeBuildCFG\->new( $conf\->{cfg} );
\&    my $policy = Test::Smoke::Policy\->new( \*(Aq../\*(Aq, $conf\->{v} );
\&    my $smoker = Test::Smoke::Smoker\->new( \e*LOGFILE, $conf );
\&
\&    foreach my $config ( $buildcfg\->configurations ) {
\&        $smoker\->smoke( $config, $policy );
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "Test::Smoke::Smoker\->new( \e*GLOB, %args )" 4
.el .IP "Test::Smoke::Smoker\->new( \e*GLOB, \f(CW%args\fR )" 4
.IX Item "Test::Smoke::Smoker->new( *GLOB, %args )"
\&\f(CW\*(C`new()\*(C'\fR takes a mandatory (opened) filehandle and some other options:
.Sp
.Vb 7
\&    ddir            build directory
\&    fdir            The forest source
\&    v               verbose level: 0..2
\&    defaultenv      \*(Aqmake test\*(Aq without $ENV{PERLIO}
\&    is56x           skip the PerlIO stuff?
\&    locale          do another testrun with $ENV{LC_ALL}
\&    force_c_locale  set $ENV{LC_ALL} = \*(AqC\*(Aq for all smoke runs
\&
\&    is_win32        is this MSWin32?
\&    w32cc           the CCTYPE for MSWin32 (MSVCxx BORLAND GCC)
\&    w32make         the maker to use for CCTYPE
.Ve
.ie n .IP "Test::Smoke::Smoker\->config( $key[, $value] )" 4
.el .IP "Test::Smoke::Smoker\->config( \f(CW$key\fR[, \f(CW$value\fR] )" 4
.IX Item "Test::Smoke::Smoker->config( $key[, $value] )"
\&\f(CW\*(C`config()\*(C'\fR is an interface to the package lexical \f(CW%CONFIG\fR,
which holds all the default values for the \f(CW\*(C`new()\*(C'\fR arguments.
.Sp
With the special key \fBall_defaults\fR this returns a reference
to a hash holding all the default values.
.ie n .IP "$smoker\->tty( $message )" 4
.el .IP "\f(CW$smoker\fR\->tty( \f(CW$message\fR )" 4
.IX Item "$smoker->tty( $message )"
Prints a message to the default filehandle.
.ie n .IP "$smoker\->log( $message )" 4
.el .IP "\f(CW$smoker\fR\->log( \f(CW$message\fR )" 4
.IX Item "$smoker->log( $message )"
Prints a message to the logfile, filehandle.
.ie n .IP "$smoker\->ttylog( $message )" 4
.el .IP "\f(CW$smoker\fR\->ttylog( \f(CW$message\fR )" 4
.IX Item "$smoker->ttylog( $message )"
Prints a message to both the default and the logfile filehandles.
.ie n .IP "$smoker\->smoke( $config[, $policy] )" 4
.el .IP "\f(CW$smoker\fR\->smoke( \f(CW$config\fR[, \f(CW$policy\fR] )" 4
.IX Item "$smoker->smoke( $config[, $policy] )"
\&\f(CW\*(C`smoke()\*(C'\fR takes a \fBTest::Smoke::BuildCFG::Config\fR object and runs all
the basic steps as (private) object methods.
.ie n .IP "$smoker\->make_distclean( )" 4
.el .IP "\f(CW$smoker\fR\->make_distclean( )" 4
.IX Item "$smoker->make_distclean( )"
\&\f(CW\*(C`make_distclean()\*(C'\fR runs \f(CW\*(C`make \-i distclean 2>/dev/null\*(C'\fR
.ie n .IP "$smoker\->extra_manicheck( )" 4
.el .IP "\f(CW$smoker\fR\->extra_manicheck( )" 4
.IX Item "$smoker->extra_manicheck( )"
\&\f(CW\*(C`extra_manicheck()\*(C'\fR will only work for \f(CW\*(C`$self\->{v} > 1\*(C'\fR and does
an extra integrity check comparing \fI\s-1MANIFEST\s0\fR and the
source-tree. Output is send to the tty.
.ie n .IP "$smoker\->handle_policy( $policy, @substs );" 4
.el .IP "\f(CW$smoker\fR\->handle_policy( \f(CW$policy\fR, \f(CW@substs\fR );" 4
.IX Item "$smoker->handle_policy( $policy, @substs );"
\&\f(CW\*(C`handle_policy()\*(C'\fR will try to apply the substition rules and then
write the file \fIPolicy.sh\fR.
.ie n .IP "$smoker\->Configure( $config )" 4
.el .IP "\f(CW$smoker\fR\->Configure( \f(CW$config\fR )" 4
.IX Item "$smoker->Configure( $config )"
\&\f(CW\*(C`Configure()\*(C'\fR sorts out the MSWin32 mess and calls \fI./Configure\fR
.Sp
returns true if a makefile was created
.ie n .IP "$smoker\->make_( )" 4
.el .IP "\f(CW$smoker\fR\->make_( )" 4
.IX Item "$smoker->make_( )"
\&\f(CW\*(C`make_()\*(C'\fR will run make.
.Sp
returns true if a perl executable is found
.IP "make_test_prep( )" 4
.IX Item "make_test_prep( )"
Run \f(CW\*(C`\f(CImake test\-perp\f(CW\*(C'\fR and check if \fIt/perl\fR exists.
.ie n .IP "$smoker\->make_test( )" 4
.el .IP "\f(CW$smoker\fR\->make_test( )" 4
.IX Item "$smoker->make_test( )"
.PD 0
.ie n .IP "$self\->extend_with_harness( @nok )" 4
.el .IP "\f(CW$self\fR\->extend_with_harness( \f(CW@nok\fR )" 4
.IX Item "$self->extend_with_harness( @nok )"
.ie n .IP "$moker\->make_test_harness" 4
.el .IP "\f(CW$moker\fR\->make_test_harness" 4
.IX Item "$moker->make_test_harness"
.PD
Use Test::Harness (the test_harness target) to get the failing test
information and do not bother with \s-1TEST\s0.
.ie n .IP "$smoker\->_run_harness_target( $target, $extra )" 4
.el .IP "\f(CW$smoker\fR\->_run_harness_target( \f(CW$target\fR, \f(CW$extra\fR )" 4
.IX Item "$smoker->_run_harness_target( $target, $extra )"
The command to run \f(CW\*(C`make test_harness\*(C'\fR differs based on platform, so
the arguments have to be passed into general routine. \f(CW$target\fR
specifies the makefile-target, \f(CW$makeopt\fR specifies the extra options
for the make program.
.ie n .IP "$smoker\->_run_harness3_target( $target, $extra )" 4
.el .IP "\f(CW$smoker\fR\->_run_harness3_target( \f(CW$target\fR, \f(CW$extra\fR )" 4
.IX Item "$smoker->_run_harness3_target( $target, $extra )"
The command to run \f(CW\*(C`make test_harness\*(C'\fR differs based on platform, so
the arguments have to be passed into general routine. \f(CW$target\fR
specifies the makefile-target, \f(CW$makeopt\fR specifies the extra options
for the make program.
.ie n .IP "$self\->make_minitest" 4
.el .IP "\f(CW$self\fR\->make_minitest" 4
.IX Item "$self->make_minitest"
\&\f(CW\*(C`make\*(C'\fR was unable to build a \fIperl\fR executable, but managed to build
\&\fIminiperl\fR, so we do \f(CW\*(C`make\ minitest\*(C'\fR.
.ie n .IP "$self\->_parse_harness_output( $\e%notok, $all_ok, @lines )" 4
.el .IP "\f(CW$self\fR\->_parse_harness_output( $\e%notok, \f(CW$all_ok\fR, \f(CW@lines\fR )" 4
.IX Item "$self->_parse_harness_output( $%notok, $all_ok, @lines )"
Fator out the parsing of the Test::Harness output, as it seems subject
to change.
.ie n .IP "$self\->_parse_harness3_output( $\e%notok, $all_ok, @lines )" 4
.el .IP "\f(CW$self\fR\->_parse_harness3_output( $\e%notok, \f(CW$all_ok\fR, \f(CW@lines\fR )" 4
.IX Item "$self->_parse_harness3_output( $%notok, $all_ok, @lines )"
Fator out the parsing of the Test::Harness 3 output, as it seems subject
to change.
.ie n .IP "$self\->_trasnaform_testnames( @notok )" 4
.el .IP "\f(CW$self\fR\->_trasnaform_testnames( \f(CW@notok\fR )" 4
.IX Item "$self->_trasnaform_testnames( @notok )"
\&\f(CW\*(C`_transform_testnames()\*(C'\fR takes a list of testnames, as found by
\&\f(CW\*(C`TEST\*(C'\fR (testname without \f(CW\*(C`.t\*(C'\fR suffix followed by dots and a reason)
and returns a hash with the filenames relative to the \f(CW\*(C`t/\*(C'\fR directory
as keys and the reason as value.
.ie n .IP "$smoker\->_normalize_testname( $test )" 4
.el .IP "\f(CW$smoker\fR\->_normalize_testname( \f(CW$test\fR )" 4
.IX Item "$smoker->_normalize_testname( $test )"
Normalize a testname...
.IP "set_skip_tests( [$unset] )" 4
.IX Item "set_skip_tests( [$unset] )"
Read from a \s-1MANIFEST\s0 like file, set in \f(CW\*(C`$self\->{skip_tests}\*(C'\fR, and
rename the files in it with the extension \fI.tskip\fR. If \f(CW$unset\fR is
set, they will be renamed back.
.IP "unset_skip_tests" 4
.IX Item "unset_skip_tests"
Calls \f(CW\*(C`$self\->set_skip_tests( 1 )\*(C'\fR.
.ie n .IP "$self\->change_manifest( \e@tests, $unset )" 4
.el .IP "\f(CW$self\fR\->change_manifest( \e@tests, \f(CW$unset\fR )" 4
.IX Item "$self->change_manifest( @tests, $unset )"
.PD 0
.ie n .IP "$self\->_run( $command[, $sub[, @args]] )" 4
.el .IP "\f(CW$self\fR\->_run( \f(CW$command\fR[, \f(CW$sub\fR[, \f(CW@args\fR]] )" 4
.IX Item "$self->_run( $command[, $sub[, @args]] )"
.PD
\&\f(CW\*(C`_run()\*(C'\fR returns \f(CW\*(C`qx( $command )\*(C'\fR unless \f(CW$sub\fR is specified.
If \f(CW$sub\fR is defined (and a coderef) \f(CW\*(C`$sub\->( $command, @args )\*(C'\fR will
be called.
.ie n .IP "$self\->_make( $command )" 4
.el .IP "\f(CW$self\fR\->_make( \f(CW$command\fR )" 4
.IX Item "$self->_make( $command )"
\&\f(CW\*(C`_make()\*(C'\fR calls \f(CW\*(C`run( "make $command" )\*(C'\fR, and does some extra
stuff to help MSWin32 (the right maker, the directory).
.ie n .IP "$smoker\->_make_fork( $target, $extra )" 4
.el .IP "\f(CW$smoker\fR\->_make_fork( \f(CW$target\fR, \f(CW$extra\fR )" 4
.IX Item "$smoker->_make_fork( $target, $extra )"
\&\f(CW\*(C`_make_fork()\*(C'\fR opens a read pipe to the make command with \f(CW$target\fR
and \f(CW$extra\fR arguments for the make command.
.ie n .IP "$smoker\->_vms_\|_rooted_logical" 4
.el .IP "\f(CW$smoker\fR\->_vms_\|_rooted_logical" 4
.IX Item "$smoker->_vms__rooted_logical"
This code sets up a rooted logical \f(CW\*(C`TSP5SRC\*(C'\fR and changes the {ddir}
to that root.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Smoke
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) 2002\-2003, All rights reserved.
.PP
.Vb 1
\&  * Abe Timmerman <abeltje@cpan.org>
.Ve
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.IP "\(bu" 4
http://www.perl.com/perl/misc/Artistic.html
.IP "\(bu" 4
http://www.gnu.org/copyleft/gpl.html
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
